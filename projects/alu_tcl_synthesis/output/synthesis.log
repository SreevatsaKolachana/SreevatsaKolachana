
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.55+46 (git sha1 aa1daa702, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)

-- Executing script file `synth.ys' --

1. Executing Verilog-2005 frontend: ../src/top.sv
Parsing Verilog input from `../src/top.sv' to AST representation.
Generating RTLIL representation for module `\alu_fsm'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \alu_fsm

2.2. Analyzing design hierarchy..
Top module:  \alu_fsm
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../src/top.sv:53$10 in module alu_fsm.
Marked 1 switch rules as full_case in process $proc$../src/top.sv:40$4 in module alu_fsm.
Marked 2 switch rules as full_case in process $proc$../src/top.sv:30$3 in module alu_fsm.
Marked 1 switch rules as full_case in process $proc$../src/top.sv:22$1 in module alu_fsm.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `\alu_fsm.$proc$../src/top.sv:53$10'.
Found async reset \rst_n in `\alu_fsm.$proc$../src/top.sv:22$1'.

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~4 debug messages>

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu_fsm.$proc$../src/top.sv:53$10'.
     1/2: $0\done[0:0]
     2/2: $0\result[3:0]
Creating decoders for process `\alu_fsm.$proc$../src/top.sv:40$4'.
     1/1: $1\alu_result[3:0]
Creating decoders for process `\alu_fsm.$proc$../src/top.sv:30$3'.
     1/2: $2\next_state[1:0]
     2/2: $1\next_state[1:0]
Creating decoders for process `\alu_fsm.$proc$../src/top.sv:22$1'.
     1/1: $0\state[1:0]

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\alu_fsm.\alu_result' from process `\alu_fsm.$proc$../src/top.sv:40$4'.
No latch inferred for signal `\alu_fsm.\next_state' from process `\alu_fsm.$proc$../src/top.sv:30$3'.

3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\alu_fsm.\result' using process `\alu_fsm.$proc$../src/top.sv:53$10'.
  created $adff cell `$procdff$44' with positive edge clock and positive level reset.
Creating register for signal `\alu_fsm.\done' using process `\alu_fsm.$proc$../src/top.sv:53$10'.
  created $adff cell `$procdff$49' with positive edge clock and positive level reset.
Creating register for signal `\alu_fsm.\state' using process `\alu_fsm.$proc$../src/top.sv:22$1'.
  created $adff cell `$procdff$54' with positive edge clock and positive level reset.

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\alu_fsm.$proc$../src/top.sv:53$10'.
Removing empty process `alu_fsm.$proc$../src/top.sv:53$10'.
Found and cleaned up 1 empty switch in `\alu_fsm.$proc$../src/top.sv:40$4'.
Removing empty process `alu_fsm.$proc$../src/top.sv:40$4'.
Found and cleaned up 2 empty switches in `\alu_fsm.$proc$../src/top.sv:30$3'.
Removing empty process `alu_fsm.$proc$../src/top.sv:30$3'.
Removing empty process `alu_fsm.$proc$../src/top.sv:22$1'.
Cleaned up 4 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_fsm.
<suppressed ~11 debug messages>

4. Executing FLATTEN pass (flatten design).

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_fsm.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_fsm'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$33.
Removed 1 multiplexer ports.
<suppressed ~3 debug messages>

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_fsm.
    New ctrl vector for $pmux cell $procmux$12: { $auto$opt_reduce.cc:137:opt_pmux$56 $procmux$37_CMP }
  Optimizing cells in module \alu_fsm.
Performed a total of 1 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_fsm'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$54 ($adff) from module alu_fsm (D = $procmux$36_Y, Q = \state).
Adding EN signal on $procdff$44 ($adff) from module alu_fsm (D = $procmux$17_Y, Q = \result).
Adding EN signal on $procdff$49 ($adff) from module alu_fsm (D = $procmux$12_Y, Q = \done).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_fsm..
Removed 2 unused cells and 26 unused wires.
<suppressed ~3 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_fsm.
<suppressed ~3 debug messages>

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_fsm.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_fsm'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_fsm..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_fsm.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Executing TECHMAP pass (map to technology primitives).

6.1. Executing Verilog-2005 frontend: /home/sreev/yosys/share/techmap.v
Parsing Verilog input from `/home/sreev/yosys/share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=4:B_SIGNED=0:B_WIDTH=4:Y_WIDTH=4:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$95ab7b964273918a033d1324366ecc612d202989\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~383 debug messages>

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_fsm.
<suppressed ~52 debug messages>

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_fsm'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_fsm.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_fsm'.
Removed a total of 0 cells.

7.6. Executing OPT_DFF pass (perform DFF optimizations).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_fsm..
Removed 11 unused cells and 177 unused wires.
<suppressed ~12 debug messages>

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_fsm.

7.9. Rerunning OPT passes. (Maybe there is more to do..)

7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_fsm.
Performed a total of 0 changes.

7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_fsm'.
Removed a total of 0 cells.

7.13. Executing OPT_DFF pass (perform DFF optimizations).

7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_fsm..

7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_fsm.

7.16. Finished OPT passes. (There is nothing left to do.)

8. Executing Verilog backend.

8.1. Executing BMUXMAP pass.

8.2. Executing DEMUXMAP pass.
Dumping module `\alu_fsm'.

9. Printing statistics.

=== alu_fsm ===

   Number of wires:                 66
   Number of wire bits:            170
   Number of public wires:          11
   Number of public wire bits:      27
   Number of ports:                  8
   Number of port bits:             19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                137
     $_AND_                         38
     $_DFFE_PN0P_                    7
     $_MUX_                         13
     $_NOT_                         18
     $_OR_                          47
     $_XOR_                         14

End of script. Logfile hash: 52887b4444, CPU: user 0.04s system 0.00s, MEM: 20.62 MB peak
Yosys 0.55+46 (git sha1 aa1daa702, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)
Time spent: 23% 9x opt_expr (0 sec), 20% 1x techmap (0 sec), ...
