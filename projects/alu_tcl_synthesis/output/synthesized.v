/* Generated by Yosys 0.55+46 (git sha1 aa1daa702, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

(* top =  1  *)
(* src = "src/top.sv:5.1-74.10" *)
module alu_fsm(clk, rst_n, start, A, B, opcode, result, done);
  (* src = "src/top.sv:53.5-72.8" *)
  wire [3:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  (* src = "src/top.sv:9.18-9.19" *)
  input [3:0] A;
  wire [3:0] A;
  (* src = "src/top.sv:10.18-10.19" *)
  input [3:0] B;
  wire [3:0] B;
  (* src = "src/top.sv:6.11-6.14" *)
  input clk;
  wire clk;
  (* src = "src/top.sv:13.16-13.20" *)
  output done;
  reg done;
  (* src = "src/top.sv:11.18-11.24" *)
  input [2:0] opcode;
  wire [2:0] opcode;
  (* src = "src/top.sv:12.22-12.28" *)
  output [3:0] result;
  reg [3:0] result;
  (* src = "src/top.sv:7.11-7.16" *)
  input rst_n;
  wire rst_n;
  (* src = "src/top.sv:8.11-8.16" *)
  input start;
  wire start;
  (* onehot = 32'd1 *)
  reg [2:0] state;
  assign _020_ = state[0] & ~(start);
  assign _002_ = _020_ | state[1];
  assign _004_ = state[2] | state[0];
  assign _003_ = _004_ | state[1];
  assign _021_ = ~(A[0] ^ B[0]);
  assign _022_ = ~opcode[2];
  assign _023_ = opcode[1] | opcode[0];
  assign _024_ = _023_ | _022_;
  assign _025_ = _024_ | _021_;
  assign _026_ = ~(A[0] | B[0]);
  assign _027_ = ~(opcode[1] & opcode[0]);
  assign _028_ = _022_ & ~(_027_);
  assign _029_ = _028_ & ~(_026_);
  assign _030_ = _025_ & ~(_029_);
  assign _031_ = ~(A[0] & B[0]);
  assign _032_ = opcode[0] | ~(opcode[1]);
  assign _033_ = _022_ & ~(_032_);
  assign _034_ = _033_ & ~(_031_);
  assign _035_ = _031_ & ~(_026_);
  assign _036_ = opcode[1] | ~(opcode[0]);
  assign _037_ = _022_ & ~(_036_);
  assign _038_ = _022_ & ~(_023_);
  assign _039_ = ~(_038_ | _037_);
  assign _040_ = _035_ & ~(_039_);
  assign _041_ = _040_ | _034_;
  assign _042_ = _030_ & ~(_041_);
  assign _043_ = opcode[2] ? _023_ : _027_;
  assign _044_ = _033_ | ~(_039_);
  assign _045_ = _043_ & ~(_044_);
  assign _046_ = _045_ | _042_;
  assign _000_[0] = state[2] & ~(_046_);
  assign _047_ = ~(A[1] ^ B[1]);
  assign _048_ = _047_ | _024_;
  assign _049_ = ~(A[1] | B[1]);
  assign _050_ = _028_ & ~(_049_);
  assign _051_ = _048_ & ~(_050_);
  assign _052_ = ~(A[1] & B[1]);
  assign _053_ = _033_ & ~(_052_);
  assign _054_ = ~_039_;
  assign _055_ = ~A[1];
  assign _056_ = B[0] ^ B[1];
  assign _057_ = _037_ ? B[1] : _056_;
  assign _058_ = _057_ ^ _055_;
  assign _059_ = B[0] & ~(A[0]);
  assign _060_ = _059_ ^ _058_;
  assign _061_ = _054_ & ~(_060_);
  assign _062_ = _061_ | _053_;
  assign _063_ = _051_ & ~(_062_);
  assign _064_ = _063_ | _045_;
  assign _000_[1] = state[2] & ~(_064_);
  assign _065_ = ~(A[2] ^ B[2]);
  assign _066_ = _065_ | _024_;
  assign _067_ = ~(A[2] | B[2]);
  assign _068_ = _028_ & ~(_067_);
  assign _069_ = _066_ & ~(_068_);
  assign _070_ = ~(A[2] & B[2]);
  assign _071_ = _033_ & ~(_070_);
  assign _072_ = ~A[2];
  assign _073_ = ~(B[0] | B[1]);
  assign _074_ = ~(_073_ ^ B[2]);
  assign _075_ = _037_ ? B[2] : _074_;
  assign _076_ = _075_ ^ _072_;
  assign _077_ = _057_ | _055_;
  assign _078_ = _058_ & ~(_059_);
  assign _079_ = _077_ & ~(_078_);
  assign _080_ = _079_ ^ _076_;
  assign _081_ = _054_ & ~(_080_);
  assign _082_ = _081_ | _071_;
  assign _083_ = _069_ & ~(_082_);
  assign _084_ = _083_ | _045_;
  assign _000_[2] = state[2] & ~(_084_);
  assign _085_ = ~(A[3] ^ B[3]);
  assign _086_ = _085_ | _024_;
  assign _087_ = ~(A[3] | B[3]);
  assign _088_ = _028_ & ~(_087_);
  assign _089_ = _086_ & ~(_088_);
  assign _005_ = ~(A[3] & B[3]);
  assign _006_ = _033_ & ~(_005_);
  assign _007_ = ~B[3];
  assign _008_ = _073_ & ~(B[2]);
  assign _009_ = _008_ ^ B[3];
  assign _010_ = _037_ ? _007_ : _009_;
  assign _011_ = _010_ ^ A[3];
  assign _012_ = _075_ | _072_;
  assign _013_ = _076_ & ~(_079_);
  assign _014_ = _012_ & ~(_013_);
  assign _015_ = _014_ ^ _011_;
  assign _016_ = _054_ & ~(_015_);
  assign _017_ = _016_ | _006_;
  assign _018_ = _089_ & ~(_017_);
  assign _019_ = _018_ | _045_;
  assign _000_[3] = state[2] & ~(_019_);
  assign _001_ = start & state[0];
  (* src = "src/top.sv:53.5-72.8" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) done <= 1'h0;
    else if (_003_) done <= state[1];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) state[0] <= 1'h1;
    else state[0] <= _002_;
  always @(posedge clk, negedge rst_n)
    if (!rst_n) state[1] <= 1'h0;
    else state[1] <= state[2];
  always @(posedge clk, negedge rst_n)
    if (!rst_n) state[2] <= 1'h0;
    else state[2] <= _001_;
  (* src = "src/top.sv:53.5-72.8" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) result[0] <= 1'h0;
    else if (_004_) result[0] <= _000_[0];
  (* src = "src/top.sv:53.5-72.8" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) result[1] <= 1'h0;
    else if (_004_) result[1] <= _000_[1];
  (* src = "src/top.sv:53.5-72.8" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) result[2] <= 1'h0;
    else if (_004_) result[2] <= _000_[2];
  (* src = "src/top.sv:53.5-72.8" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) result[3] <= 1'h0;
    else if (_004_) result[3] <= _000_[3];
endmodule
